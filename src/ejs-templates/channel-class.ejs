<?php

namespace <%= servicesNamespace %>\Channels;

<% for (let usedClass of usedClasses.values()) { -%>
use <%= modelsNamespace %>\<%= usedClass %>;
<% } -%>
<% if (subscribeOperation) { -%>
use Closure;
<% } -%>
use <%= servicesNamespace %>\MessageBroker\Client;
use <%= servicesNamespace %>\MessageBroker\Destination;
use <%= servicesNamespace %>\MessageBroker\Message;
use <%= servicesNamespace %>\MessageBroker\Subscription;
use Exception;
use JMS\Serializer\Serializer;
use JMS\Serializer\SerializerBuilder;
<% if (publishOperation) { -%>
use Ramsey\Uuid\Uuid;
<% } -%>
use RuntimeException;

class <%= channelClassNamePrefix %>Channel
{

<%# -%>
<% if (subscribeOperation && subscribeOperation.payload.discriminator !== undefined) { -%>
    private const DISCRIMINATOR_PROPERTY_NAME = '<%= subscribeOperation.payload.discriminator %>';
<% } -%>
<%# -%>
    private const MODELS_NAMESPACE = '<%= modelsNamespace %>';

    private const DESTINATION_NAME = '<%= channelName %>';

    private Client $client;
    private Destination $destination;
    /**
     * @noinspection All
     */
    private Subscription|null $subscription;

    private Serializer $serializer;

<% if (subscribeOperation) { -%>
    private Closure $<%= lowerCaseFirst(subscribeOperation.payload.name) %>Closure;
<% for( let index = 0; index < subscribeOperation.payload.subClasses.length; index++ ) { -%>
    private Closure $<%= lowerCaseFirst(subscribeOperation.payload.subClasses[index].name) %>Closure;
<% } -%>
<% } -%>

    public function __construct(Client $client<%= channel.hasParameters() ? ', array $channelParameters' : '' %>)
    {
        $this->client = $client;
        $this->destination = new Destination(self::DESTINATION_NAME<%= channel.hasParameters() ? ', $channelParameters' : '' %>);
        $this->subscription = null;

        $this->serializer = SerializerBuilder::create()->build();

<% if (subscribeOperation) { -%>
        $this-><%= lowerCaseFirst(subscribeOperation.payload.name) %>Closure = function () { };
<% for( let index = 0; index < subscribeOperation.payload.subClasses.length; index++ ) { -%>
        $this-><%= lowerCaseFirst(subscribeOperation.payload.subClasses[index].name) %>Closure = function () { };
<% } -%>
<% } -%>
    }
<%# -%>
<% if (publishOperation) { %>
    /**
     * @noinspection PhpUnused
     * @throws Exception
     */
    public function <%= publishOperation.name %>(<%= publishOperation.payload.name %> $<%= lowerCaseFirst(publishOperation.payload.name) %>): void
    {
        if (!$this->client->isConnected()) {
            $this->client->connect();
        }

        $message = $this->buildMessageWithObject($<%= lowerCaseFirst(publishOperation.payload.name) %>);

        $this->client->publish($message, $this->destination);
    }

    private function buildMessageWithObject(object $object): Message
    {
        $messageId = Uuid::uuid4();
        $messageBody = $this->serializer->serialize($object, 'json');

        return new Message($messageId, $messageBody);
    }
<% } -%>
<%# -%>
<% if (subscribeOperation) { %>
    /**
     * @throws Exception
     */
    public function listen(): void
    {
        if (!$this->client->isConnected()) {
            $this->client->connect();
        }

        $this->subscription = $this->subscribeToDestination();

        $this->client->listen();
    }

    /**
     * @noinspection PhpUnused
     */
    public function <%= subscribeOperation.name %>(Closure $closure): void
    {
        $this-><%= lowerCaseFirst(subscribeOperation.payload.name) %>Closure = $closure;
    }
<% for( let index = 0; index < subscribeOperation.payload.subClasses.length; index++ ) { %>
    /**
     * @noinspection PhpUnused
     */
    public function on<%= subscribeOperation.payload.subClasses[index].name %>(Closure $closure): void
    {
        $this-><%= lowerCaseFirst(subscribeOperation.payload.subClasses[index].name) %>Closure = $closure;
    }
<% } -%>
<%# -%>

    private function subscribeToDestination(): Subscription
    {
        return $this->client->subscribe($this->destination, function (Message $message) {
            $object = $this->extractObjectFromMessage($message);

            ($this-><%= lowerCaseFirst(subscribeOperation.payload.name) %>Closure)($object, $message);
<%# -%>
<% if (subscribeOperation.payload.discriminator !== undefined) { %>
            $objectFullyQualifiedClassName = get_class($object);
            switch ($objectFullyQualifiedClassName) {
                <% for( let index = 0; index < subscribeOperation.payload.subClasses.length; index++ ) { %>
                case <%= subscribeOperation.payload.subClasses[index].name %>::class:
                    ($this-><%= lowerCaseFirst(subscribeOperation.payload.subClasses[index].name) %>Closure)($object, $message);
                    break;
                <% } %>
                default:
                    throw new RuntimeException("Unhandled object class '$objectFullyQualifiedClassName'.");
            }
<% } -%>
<%# -%>
        });
    }

    private function extractObjectFromMessage(Message $message): <%= subscribeOperation.payload.name %>
    {
        $body = $message->getBody();

<% if (subscribeOperation.payload.discriminator !== undefined) { -%>
        $data = json_decode($body, true);

        if ($data == null) {
            throw new RuntimeException('The message body does not contain a valid JSON.');
        }

        $discriminatorPropertyName = self::DISCRIMINATOR_PROPERTY_NAME;

        if (!array_key_exists($discriminatorPropertyName, $data)) {
            throw new RuntimeException("The JSON object representation does not contain the '$discriminatorPropertyName' discriminator property.");
        }

        $discriminatorPropertyValue = $data[$discriminatorPropertyName];

        if (empty($discriminatorPropertyValue)) {
            throw new RuntimeException("The JSON object '$discriminatorPropertyName' discriminator property is empty.");
        }

        $type = $this->getFullyQualifiedClassName($discriminatorPropertyValue);
<% } else { -%>
        $type = $this->getFullyQualifiedClassName('<%= subscribeOperation.payload.name %>');
<% } -%>

        return $this->serializer->deserialize($body, $type, 'json');
    }

    private function getFullyQualifiedClassName($className): string
    {
        return self::MODELS_NAMESPACE . '\\' . $className;
    }
<% } -%>

}